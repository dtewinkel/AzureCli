stages:
- stage: build
  displayName: Version and build
  jobs:

  - job: run_build
    strategy:
      matrix:
        ubuntu:
          os: ubuntu
          pool: ubuntu-latest
          publish: true
        windows:
          os: windows
          pool: windows-latest
          publish: false
        macos:
          os: macos
          pool: macos-latest
          publish: false
    displayName: Build, publish AzureCli Module
    variables:
      Modules.Path: Modules
      Repository.Name: Local$(Module.Name)Repo
      Repository.ArtifactPath: Repositories/$(Repository.Name)
      Pester.TestOutput: $(System.DefaultWorkingDirectory)/TestResults.Pester.xml
      Pester.CoverageOutput: $(System.DefaultWorkingDirectory)/Coverage.Pester.xml
    pool:
      vmImage: $(pool)
    steps:

    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: 5.x

    - task: gitversion/execute@0
      displayName: Determine Version using GitVersion
      
    - task: PowerShell@2
      displayName: Install required PowerShell modules and other tools
      inputs:
        filePath: deployment/pipelines/scripts/Configure.ps1
        pwsh: true

    - task: PowerShell@2
      displayName: Build AzureCli module
      inputs:
        filePath: deployment/pipelines/scripts/Build.ps1
        arguments: >-
          -CommitDate $(GitVersion.CommitDate)
          -MajorMinorPatch $(GitVersion.MajorMinorPatch)
          -NuGetPreReleaseTagV2 "$(GitVersion.NuGetPreReleaseTagV2)"
        pwsh: true

    - task: PowerShell@2
      displayName: Run ScriptAnalyzer
      inputs:
        filePath: deployment/pipelines/scripts/AnalyzeScripts.ps1
        pwsh: true

    - task: PowerShell@2
      displayName: Run Pester Unit Tests
      inputs:
        filePath: deployment/pipelines/scripts/Test.ps1
        arguments: -TestOutput '$(Pester.TestOutput)' -CoverageOutput '$(Pester.CoverageOutput)'
        pwsh: true

    - task: PublishTestResults@2
      inputs:
        testRunner: NUnit
        testResultsFiles: $(Pester.TestOutput)
        testRunTitle: Pester Unit Tests $(os)
        failTaskOnFailedTests: true
      displayName: Publish Pester Unit Test Results
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - pwsh: |
        Write-Host "##vso[task.setvariable variable=ModulePaths]$((dir "$(Modules.Path)" -Directory -Recurse).FullName -join ';')"
      displayName: Determine module paths

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: JaCoCo
        summaryFileLocation: $(Pester.CoverageOutput)
        pathToSources: $(ModulePaths)
      displayName: Publish Pester Unit Test Code Coverage
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - publish: $(Repository.ArtifactPath)
      artifact: $(Repository.ArtifactName)
      displayName: Publish $(Repository.ArtifactName) Artifact
      condition: and(succeeded(), eq(variables.publish, 'true'))
