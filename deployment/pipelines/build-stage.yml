stages:
- stage: build
  displayName: Version and build
  jobs:

  - job: run_build
    displayName: Build, publish AzureCli Module
    variables:
      Module.Path: $(Module.Name)/$(Module.Name)
      Module.Tests.Path: $(Module.Name).Tests
      Module.ArtifactPath: $(build.artifactStagingDirectory)/$(Module.Name)
      Test.ArtifactPath: $(build.artifactStagingDirectory)/$(Module.Name).Tests
      Repository.ArtifactPath: $(build.artifactStagingDirectory)/Repository
      Repository.Name: Local$(Module.Name)PowerShell
      SolutionFile: AzureCli.sln
      CompanyName: Daniël te Winkel
      Author: Daniël te Winkel
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    pool:
      vmImage: windows-latest
    steps:

    - task: GitVersion@5
      displayName: Determine Version using GitVersion
      inputs:
        configFilePath: GitVersion.yml

    - task: CopyFiles@2
      displayName: Copy Module files
      inputs:
        SourceFolder: $(Module.Path)
        Contents: '**'
        TargetFolder: $(Module.ArtifactPath)

    - pwsh: |
        $modulePath = (Join-Path "$(Module.ArtifactPath)" "$(Module.Name).psd1")
        $year = ([DateTime]"$(GitVersion.CommitDate)").Year
        $copyright = "Copyright © ${year}, $(CompanyName). All rights reserved."
        $updateParameters = @{
          Path = $modulePath
          ModuleVersion = '$(GitVersion.MajorMinorPatch)'
          Copyright = $copyright
          Author = '$(Author)'
          CompanyName = '$(CompanyName)'
        }
        if("$(GitVersion.PreReleaseTag)" -ne "")
        {
          $preReleaseTag = '$(GitVersion.NuGetPreReleaseTagV2)' -replace '[^a-zA-Z0-9]', ''
          $updateParameters.Add("Prerelease", "${preReleaseTag}")
        }
        Update-ModuleManifest @updateParameters
        # make sure the ModuleManifest is in the right encoding.
        $manifest = Get-Content $modulePath
        $manifest | Out-File -Encoding utf8BOM $modulePath
      displayName: Update Module manifest

    - pwsh: |
        Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force
        Invoke-ScriptAnalyzer "$(Module.ArtifactPath)" -EnableExit
      displayName: Run PowerShell ScriptAnalyzer

    - pwsh: |
        mkdir $(Test.ArtifactPath)
        cd $(Test.ArtifactPath)
        Copy-Item $(Module.Tests.Path) .
        mkdir $(Module.Name)
        Copy-Item $(Module.ArtifactPath) $(Module.Name)
        Invoke-Pester -CI
      displayName: Run Unit tests

    - pwsh: |
        if(-not (Test-Path $(Repository.ArtifactPath)))
        {
            $newPath = New-Item -Path $(Repository.ArtifactPath) -ItemType Directory
        }
        Remove-Item (Join-Path $(Repository.ArtifactPath) "$(Module.Name)*.nupkg") -Force
        Register-PSRepository -Name $(Repository.Name) -SourceLocation $(Repository.ArtifactPath) -InstallationPolicy Trusted
        Publish-Module -Path $(Module.ArtifactPath) -Repository $(Repository.Name) -Force
      displayName: Create NuGet package for Module

    - publish: $(Repository.ArtifactPath)
      artifact: $(Repository.ArtifactName)
      displayName: Publish $(Repository.ArtifactName) Artifact
